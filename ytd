#!/bin/bash

# Hmm, in case of failure after $TRIES tries, rather than exit out, I
#   think I like the idea of a prompt.  Have failure line, then prompt:
#     re-run script? [Y/n]:
#  So I can just hit enter and it can re-run itself (fork ytd?)
# I still think a limit to how many unattended retries is prudent.
# But making it easy to retry for the same URL would be great.
# Might even lower RETRIES to 8 in that case?


start=`date +%s%N`

set_tdiff()
{
    local end=`date +%s%N`
    local msdiff=$(( (end - start) / 1000000 ))

    local mins=""
    local subsecs=""

    local secs=$(( msdiff / 1000 ))
    local mils=$(( msdiff % 1000 ))

    if  [ "$secs" -ge 60 ]; then
        mins=$(( secs / 60 ))
        secs=$(( secs % 60 ))
        subsecs=$(( mils / 100)) # Lazily trucating rather than rounding to nearest decisecond
        mins="$mins minutes, "
    else
        subsecs=`printf "%03d" $mils`
    fi

    tdiff="$mins$secs.$subsecs seconds"
}

int_handler()
{
    set_tdiff

    echo -e "\e[93m▶ Interrupted after $tdiff ◀\e[0m"
    kill $PPID
    exit 1
}
trap 'int_handler' INT

TRIES=16

if [ $# -ne 1 ]; then
    echo "Usage: `basename $0` <url-or-id>"
    exit 1
fi

n=0
success=false
while [ "$n" -lt "$TRIES" ]; do
    let "n+=1"

    echo -e "\e[36m──────────────────────────── Try #$n ────────────────────────────\e[0m"

    youtube-dl --no-mtime -- $1
    if [ "$?" -eq 0 ]; then
        success=true
        break
    fi
done

set_tdiff

if [ "$success" = false ]; then
    echo -e "\e[91m✘ Still failed after $TRIES tries in $tdiff; quitting ✘\e[0m"
else
    tries="tries"
    if [ "$n" -eq 1 ]; then
        tries="try"
    fi

    echo -e "\e[92m✔ Success!  (Took $n $tries in $tdiff).\e[0m"
fi
