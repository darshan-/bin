#!/usr/bin/env ruby
# coding: utf-8

# Leaves out Chrome's license file.

require 'colorize'
require 'nokogiri'
require 'curb'
require 'zlib'
require 'tmpdir'

################################################
# User configuration

# Which channel to update when none given on command line
# Set to one of 'stable', 'beta', or 'unstable'
DEFAULT = 'stable'

# Which channels to update when 'all' given on command line
# Set to any combination of 'stable', 'beta', and 'unstable'
ALL = ['stable', 'beta', 'unstable']

################################################


CHANNELS = ['stable',
            'beta']#,
            #'unstable'] # 20180207 2:30AM, other.xml.gz missing entry for unstable

VERSIONS = {}

USAGE = "Usage: #{$0.split('/').last} [#{(CHANNELS + ['all', 'list']).join('|')}]"

def delegate(argv)
  if argv.length > 2
    abort USAGE
  end

  if argv.length == 2
    cmd = argv.first
    if CHANNELS.member? cmd
      Updater.new(cmd).update(argv.last)
    elsif
      puts "${cmd} is not a channel"
      abort USAGE
    end
  end

  update_versions

  if argv.length == 1
    cmd = argv.first

    if CHANNELS.member? cmd
      Updater.new(cmd).update
    elsif cmd == 'all'
      CHANNELS.each do |c|
        Updater.new(c).update
      end
    elsif cmd == 'list'
      list
    else
      abort USAGE
    end
  else
    Updater.new('stable').update
  end
end

def update_versions
  url = 'https://dl.google.com/linux/chrome/rpm/stable/x86_64/repodata/other.xml.gz'
  ns = 'http://linux.duke.edu/metadata/other'
  doc = Nokogiri::XML(Zlib::GzipReader.new(StringIO.new(Curl.get(url).body_str)).read)

  doc.xpath('//ns:package', 'ns' => ns).each do |package|
    VERSIONS[package['name'].split('-').last] = package.xpath('ns:version', 'ns' => ns).first['ver']
  end
end

# ASCII color codes and printf alignment don't work together
def print_list_line (ch, cur, available)
  puts pad(ch, 8, :left) + '  ' + pad(cur, 24, :right) + ' ' + pad(available, 24, :right)
end

# Pads potentially colorized s with spaces to width
# Pads on left if side not given or is not :right
# Does nothing if width is less than or equal to uncolorized length of s
def pad(s, width, side = :left)
  s_len = s.uncolorize.length
  if s_len < width
    if side == :right
      s = s + ' ' * (width - s_len)
    else
      s = ' ' * (width - s_len) + s
    end
  end

  s
end

def list
  cur = {}
  latest = {}

  CHANNELS.each do |c|
    u = Updater.new(c)

    cur[c] = u.find_current
    latest[c] = u.find_latest

    if latest[c] == cur[c]
      latest[c] = 'Current'.green.bold
      cur[c] = cur[c].green.bold
    else
      latest[c] = latest[c].yellow.bold
      cur[c] = cur[c].yellow.bold
    end

    if cur[c].uncolorize == '0'
      cur[c] = 'None'.red.bold
    end
  end

  print_list_line('Channel'.bold, 'Current'.bold, 'Available'.bold)

  ch_colors = {'stable'   => :green,
               'beta'     => :yellow,
               'unstable' => :red}

  CHANNELS.each do |c|
    print_list_line(c.send(ch_colors[c]), cur[c], latest[c])
  end
end

class Updater
  def initialize(channel = nil)
    if !channel.nil?
      set_channels(channel)
    end
  end

  private def set_channels(channel)
    @channel = channel

    # PKGBUILD sometimes wants channel and sometimes doesn't
    @install_channel = channel == 'stable' ? '' : "-#{@channel}"
  end

  def find_latest
    VERSIONS[@channel]
  end

  def find_current
    `google-chrome-#{@channel} --version`.match(/\d+\.\d+\.\d+\.\d+/)[0] rescue current = '0'
  end

  def update(latest = nil)
    if latest == nil
      latest = find_latest

      if latest == nil
        abort "Could not determine latest version for channel #{@channel}"
      end

      current = find_current

      if (latest == current)
        puts "#{@channel.capitalize} channel is already up to date at version #{latest}"
        return
      end

      if current == '0'
        puts "Installing #{@channel} channel at version #{latest}"
      else
        puts "Upgrading #{@channel} channel from version #{current} to version #{latest}"
      end
    else
      puts "Force installing current #{@channel} package as version #{latest}"
    end

    install = %q[
# Colored makepkg-like functions
msg_blue() {
    printf "${blue}==>${bold} $1${all_off}\n"
}

note() {
    printf "${blue}==>${yellow} NOTE:${bold} $1${all_off}\n"
}

all_off="$(tput sgr0)"
bold="${all_off}$(tput bold)"
blue="${bold}$(tput setaf 4)"
yellow="${bold}$(tput setaf 3)"

_update() {
    msg_blue "Updating desktop MIME database..."
    update-desktop-database -q
    msg_blue "Updating icon cache.."
    xdg-icon-resource forceupdate --theme hicolor &>/dev/null
}

post_install() {
    _update
    note "The binary is called: 'google-chrome-beta'"
}


post_upgrade() {
    post_install
}


post_remove() {
    _update
}
]

    pkgbuild = %Q[
# Maintainer: Det <nimetonmaili g-mail>
# Contributors: t3ddy, Lex Rivera aka x-demon, ruario

# Check for new Linux releases in: http://googlechromereleases.blogspot.com/search/label/Beta%20updates
# or use: $ curl -s https://dl.google.com/linux/chrome/rpm/stable/x86_64/repodata/other.xml.gz | gzip -df | awk -F\" '/pkgid/{ sub(".*-","",$4); print $4": "$10 }'

pkgname=google-chrome#{@install_channel}
pkgver=#{latest}
pkgrel=1
pkgdesc="An attempt at creating a safer, faster, and more stable browser (#{@channel.capitalize} Channel)"
arch=('x86_64')
url="https://www.google.com/chrome/index.html"
license=('custom:chrome')
depends=('alsa-lib' 'desktop-file-utils' 'flac' 'gconf' 'gtk2' 'harfbuzz' 'harfbuzz-icu' 'hicolor-icon-theme'
         'icu' 'libpng' 'libxss' 'libxtst' 'nss' 'opus' 'snappy' 'speech-dispatcher' 'ttf-font' 'xdg-utils')
optdepends=('kdebase-kdialog: needed for file dialogs in KDE'
            'ttf-liberation: fix fonts for some PDFs')
makedepends=('pacman>=4.2.0')
provides=('google-chrome' 'pepper-flash')
options=('!emptydirs' '!strip')
#install=$pkgname.install
install=install
_channel=#{@channel}
#source=('eula_text.html')
source_x86_64=("google-chrome-${_channel}_${pkgver}_amd64.deb::https://dl.google.com/linux/direct/google-chrome-${_channel}_current_amd64.deb")
md5sums=('b7e752f549b215ac77f284b6486794b6')
md5sums_i686=('f4529106a32ef2e8d0d046e176788385')
md5sums_x86_64=('1b0ae60b0cc93388c8f955275944272b')

package() {
  msg2 "Extracting the data.tar.xz..."
  bsdtar -xf data.tar.xz -C "$pkgdir/"

  msg2 "Moving stuff in place..."
  # Icons
  #for i in 16x16 22x22 24x24 32x32 48x48 64x64 128x128 256x256; do
  #for i in 64x64 128x128 256x256; do
  #  install -Dm644 "$pkgdir"/opt/google/chrome#{@install_channel}/product_logo_${i/x*}.png \
  #                 "$pkgdir"/usr/share/icons/hicolor/$i/apps/google-chrome-$_channel.png
  #done

  # Man page
  # Darshan - 20171208 4:00:52 AM PST - This doesn't exist, so commenting out for now
  #  I don't ever do `man google-chrome-stable` anyway.
  #gzip "$pkgdir"/usr/share/man/man1/google-chrome#{@install_channel}.1

  # License
  #install -Dm644 eula_text.html "$pkgdir"/usr/share/licenses/google-chrome-$_channel/eula_text.html

  msg2 "Fixing Chrome icon resolution..."
  sed -i "/Exec=/i\StartupWMClass=Google-chrome-$_channel" "$pkgdir"/usr/share/applications/google-chrome#{@install_channel}.desktop

  msg2 "Adding support for CHROMIUM_USER_FLAGS..."
  sed -i 's/ "$@"/ $CHROMIUM_USER_FLAGS "$@"/' "$pkgdir"/opt/google/chrome#{@install_channel}/google-chrome#{@install_channel}

  msg2 "Removing unnecessities (e.g. Debian Cron job)..."
  rm -r "$pkgdir"/etc/cron.daily/ "$pkgdir"/opt/google/chrome#{@install_channel}/cron/
  rm "$pkgdir"/opt/google/chrome#{@install_channel}/product_logo_*.png
}
]

    Dir.mktmpdir() do |tmpdir|
      IO.write("#{tmpdir}/PKGBUILD", pkgbuild)
      IO.write("#{tmpdir}/install", install)
      `cd #{tmpdir}; makepkg -si --skipinteg`
    end

    current = find_current

    if (latest == current)
      puts "Upgraded #{@channel} channel to version #{latest}"
    else
      puts "Upgrade failed!"
    end
  end
end

delegate(ARGV)
